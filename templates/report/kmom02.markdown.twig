<h3><u>kmom02</u></h3>

**Arv (is-a relation):**<br>
När en klass ärver från en annan klass. Den har tillgång till alla public och protected properties och metoder från basklassen.

**Komposition (has-a relation):**<br>
När en klass består av en annan klass.

**Interface:**<br>
Ett kontrakt som en klass måste uppfylla. Det definierar en lista över metoder som måste finnas i en klass.

**Trait:**<br>
Består av metoder och medlemsvariabler. Används istället för multipelt arv för att deklarera metoder som kan användas i flera klasser.

Jag är ganska nöjd med hur jag löste uppgiften. Allt funkar som det ska och koden och kodstrukturen är tydlig tycker jag. Jag gillar att hålla saker simpla och tydliga. Jag har klasser för card, deck, player, hand och deck with jokers. De är relaterade med varandra både genom arv och komposition. Kompositionen använder jag t.ex. i deck-klassen. Deck-objekt består av card-objekt.

På grund av tidsbrist valde jag att flytta flyttbara uppgifter och föreläsningen om flödesschema och pseudokod till nästa kmom. Jag kikade bara lite snabbt på vad föreläsningen handlar om. Om det gäller flödesschema så jag har alltid papper och penna på mitt skrivbord och ritar alltid någon form av schema/diagram. Det hjälper mig att visualisera vad jag vill göra och hur. Utan det klarar mitt hjärna inte att planera någon större kod.

**Min TIL för detta kmom:**<br>
Att jag verkligen kan känna mig bekväm med OOPHP någon dag :)
