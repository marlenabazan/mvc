<h3><u>kmom03</u></h3>

**Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.**<br>
Jag var bekant med enhetstester sedan tidigare så själva konceptet att skriva kod som testar annan kod var jag bekant med också. Rent allmänt tycker jag att testet är mycket användbara. Särskilt för att testa negativa fall. 

**Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?**<br>
Jag lyckades nå 100% kodtäckning. Om jag ska vara ärlig så kändes det nästan för lätt. Det känns att mina tester är lite för enkla också. Samtidigt kunde jag inte tänka på några mer avancerade tester på mina klasser. Jag skulle vilja kunna lära mig att testa mina controllers också. Det skulle säkert behövas bättre tester där!

**Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?**<br>
Om jag har gjort allt rätt så var min kod supertestbar. Varje metod i varje klass har testats.


**Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.**<br>
Jag lyckades nå 100% kodtäckning  så det fanns inget behov att skriva om min kod. 

**Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.**<br>
Jag tycker att testbar kod kan identifieras som snygg och ren på något sätt. För mig ren kod följer vissa standarder och någon som inte skrivit denna kod kan förstå den utan större problem. Så kanske är det så att ren kod är testbar men inte nödvändigtvis tvärtom?

**Vilken är din TIL för detta kmom?**<br>
Att det finns något sådant som kodtäckning. Självklart var att man skulle testa alla möjliga scenarier hur koden beter sig men jag tänkte inte på att ”täcka” alla rader. Code coverage analysis var mycket hjälpsam. 
